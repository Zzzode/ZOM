name: ZOM CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  BUILD_TYPE: Release
  CLANG_FORMAT_VERSION: 18.1.8

jobs:
  check-format:
    runs-on: ubuntu-22.04-arm

    steps:
      - uses: actions/checkout@v4
      - name: Install clang-format
        run: |
          curl -Lo clang-format.tar.xz \
            https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ env.CLANG_FORMAT_VERSION }}/clang+llvm-${{ env.CLANG_FORMAT_VERSION }}-aarch64-linux-gnu.tar.xz

          mkdir -p /tmp/clang-format
          tar -xf clang-format.tar.xz --wildcards --strip-components=1 -C /tmp/clang-format 'clang+llvm*/bin/clang-format'

          echo "/tmp/clang-format/bin" >> $GITHUB_PATH

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Check Code Format
        run: |
          clang-format --version  # 验证版本
          python3 scripts/check-format.py

  check-unit-tests:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build clang
          pip3 install lit psutil

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake ninja lit
          pip3 install --break-system-packages psutil

      - name: Configure CMake
        run: cmake --preset sanitizer

      - name: Build tests
        run: cmake --build --preset sanitizer

      - name: Run tests
        run: ctest --preset allTests

  generate-coverage:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build clang lcov llvm
          pip3 install lit psutil

      - name: Configure CMake
        run: cmake --preset coverage

      - name: Build tests
        run: cmake --build --preset coverage --target all

      - name: Generate coverage report
        run: cmake --build --preset coverage --target coverage

      - name: Fix coverage paths for codecov
        run: |
          # Fix absolute paths in lcov file to be relative to project root
          sed -i "s|SF:${{github.workspace}}/|SF:|g" build-coverage/coverage/coverage.lcov
          # Verify the file exists and has content
          ls -la build-coverage/coverage/coverage.lcov
          echo "First 10 lines of coverage file:"
          head -10 build-coverage/coverage/coverage.lcov
          echo "Coverage file size: $(wc -l < build-coverage/coverage/coverage.lcov) lines"

      - name: Validate coverage data
        run: |
          # Check if coverage file is not empty
          if [ ! -s build-coverage/coverage/coverage.lcov ]; then
            echo "Error: Coverage file is empty or does not exist"
            exit 1
          fi
          # Check if coverage file contains valid lcov data
          if ! grep -q "^SF:" build-coverage/coverage/coverage.lcov; then
            echo "Error: Coverage file does not contain valid lcov data"
            exit 1
          fi
          echo "Coverage file validation passed"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: Zzzode/ZOM
          files: ${{github.workspace}}/build-coverage/coverage/coverage.lcov
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true
